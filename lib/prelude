#!/bin/bash
# -*- mode: sh -*-

## Error functions.
#  These are useful for providing unified error codes across all profile operations.

# Exits the shell with an error code and message.
# Args:
# $1 - The error code.
# $2 - The error message.
function error {
    echo "$2"
    exit "$1"
}

# All individual error functions accept an error message as their sole argument.

function internal_error {
    error 254 "$1"
}

## Import subsystem
#  Simple wrappers around sourcing to make including external functionality more ergonomic.

# Includes functions from the provided library file.
# Args:
# $1 - The filename to include. Must specify a file in /lib.
# Errors:
# 254 - Requested module does not exist.
function import {
    module="$BASHPROF_LIB/$1"
    if [ ! -f "$module" ]; then
        internal_error "Attempted to import module $module, but it does not exist"
    fi
    # shellcheck source=/dev/null
    . "$module"
}

## Logging subsystem
#  Functions for logging profile output.
#  Using these functions instead of raw echo/printf calls allows the user to
#  customize behavior by modifying configuration values.

# Writes to stdout if BASHPROF_VERBOSE is set.
# Args:
# $1 - The string to write.
function verbose {
    if [ -n "$BASHPROF_VERBOSE" ]; then
        echo "Verbose: $1"
    fi
}

# Writes an important message to the user.
# For now, this is a simple wrapper around echo, but will allow us to customize
# functionality in the future should we need to.
# $1 - The string to write.
function important {
    echo "Important: $1"
}

# Write a warning message to the user.
# $1 - The string to write.
function warning {
    echo "Warning: $1"
}

# Writes a failure message to the user.
# This is generally to let them know that some step of the profile application
# has failed, but the rest of the process will continue.
# $1 - The string to write.
function failure {
    echo "Failure: $1"
}
